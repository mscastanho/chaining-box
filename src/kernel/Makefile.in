# This is intended to be imported by other Makefiles
# which in turn will set their respective TARGETS and
# BUILD_DIR vars.

# Generate file name-scheme based on TARGETS
KERN_SOURCES = ${TARGETS:=.c}
KERN_OBJECTS = ${KERN_SOURCES:.c=.o}

LLC ?= llc
CLANG ?= clang

BPFTMPDIR=/sys/fs/bpf/tmp
JITEDOUTDIR=jited-output

BUILD_DIR=$(SRCDIR)build

# Path to libbpf headers
CFLAGS += -I$(SRCDIR)libbpf/src/root/usr/include/

all: llvm-check bdir-check $(KERN_OBJECTS)

.PHONY: clean $(CLANG) $(LLC) all debug jited-out

debug: CFLAGS += -DDEBUG -g
debug: all

stats: CFLAGS += -DENABLE_STATS
stats: all

jited-out:
	# TODO: Add statement to check if it is root
	sudo mkdir -p ${BPFTMPDIR}
	mkdir -p ${JITEDOUTDIR};
	CFLAGS="-DBPFMAPDEF" $(MAKE) ${KERN_OBJECTS}
	@for prog in ${KERN} ; do \
		sudo bpftool prog loadall $${prog}.o ${BPFTMPDIR}; \
	done
	@for loaded in $$(sudo ls ${BPFTMPDIR}) ; do \
		sudo bpftool prog dump jited pinned ${BPFTMPDIR}/$${loaded} linum > ${JITEDOUTDIR}/$${loaded}.jout; \
	done
	sudo chown -R ${USER} ${JITEDOUTDIR}
	sudo rm -rdf ${KERN_OBJECTS} ${BPFTMPDIR}

clean:
	rm -rdf ${JITEDOUTDIR}

bdir-check:
	@if [ ! -d $(BUILD_DIR) ]; then \
		echo "Error: Directory $(BUILD_DIR) doesn't exist."; \
		echo "Create it first or run the top-level Makefile instead."; \
		exit 1; \
	fi

llvm-check: $(CLANG) $(LLC)
	@for TOOL in $^ ; do \
		if [ ! $$(command -v $${TOOL} 2>/dev/null) ]; then \
			echo "*** ERROR: Cannot find tool $${TOOL}" ;\
			exit 1; \
		else true; fi; \
	done

$(KERN_OBJECTS): %.o: %.c
	($(CLANG) -O2 -Wall $(CFLAGS) -target bpf -emit-llvm \
		-c $< -o - || echo "clang failed") | \
	$(LLC) -march=bpf -mcpu=probe  -filetype=obj -o $@
	@mv $@ ${BUILD_DIR}
